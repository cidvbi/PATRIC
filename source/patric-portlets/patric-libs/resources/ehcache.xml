<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2014 Virginia Polytechnic Institute and State University
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
    http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<ehcache>
	<!--
	DiskStore configuration
	=======================
	The diskStore element is optional. To turn off disk store path creation, comment out the diskStore
	element below.
	Configure it if you have overflowToDisk or diskPersistent enabled for any cache.
	If it is not configured, and a cache is created which requires a disk store, a warning will be
	issued and java.io.tmpdir will automatically be used.
	diskStore has only one attribute - "path". It is the path to the directory where
	.data and .index files will be created.
	If the path is one of the following Java System Property it is replaced by its value in the
	running VM. For backward compatibility these are not specified without being enclosed in the ${token}
	replacement syntax.
	The following properties are translated:
	* user.home - User's home directory
	* user.dir - User's current working directory
	* java.io.tmpdir - Default temp file path
	* ehcache.disk.store.dir - A system property you would normally specify on the command line
	e.g. java -Dehcache.disk.store.dir=/u01/myapp/diskdir ...
	Subdirectories can be specified below the property e.g. java.io.tmpdir/one
	-->
	<diskStore path="java.io.tmpdir/"/>
	<!--
	CacheManagerEventListener
	=========================
	Specifies a CacheManagerEventListenerFactory which is notified when Caches are added
	or removed from the CacheManager.
	The attributes of CacheManagerEventListenerFactory are:
	* class - a fully qualified factory class name
	* properties - comma separated properties having meaning only to the factory.
	Sets the fully qualified class name to be registered as the CacheManager event listener.
	The events include:
	* adding a Cache
	* removing a Cache
	Callbacks to listener methods are synchronous and unsynchronized. It is the responsibility
	of the implementer to safely handle the potential performance and thread safety issues
	depending on what their listener is doing.
	If no class is specified, no listener is created. There is no default.
	-->
	<cacheManagerEventListenerFactory class="" properties=""/>
	<!--
	Cache configuration
	===================
	The following attributes are required.
	name:
	Sets the name of the cache. This is used to identify the cache. It must be unique.
	maxElementsInMemory:
	Sets the maximum number of objects that will be created in memory
	maxElementsOnDisk:
	Sets the maximum number of objects that will be maintained in the DiskStore
	The default value is zero, meaning unlimited.
	eternal:
	Sets whether elements are eternal. If eternal,  timeouts are ignored and the
	element is never expired.
	overflowToDisk:
	Sets whether elements can overflow to disk when the memory store
	has reached the maxInMemory limit.
	The following attributes and elements are optional.
	timeToIdleSeconds:
	Sets the time to idle for an element before it expires.
	i.e. The maximum amount of time between accesses before an element expires
	Is only used if the element is not eternal.
	Optional attribute. A value of 0 means that an Element can idle for infinity.
	The default value is 0.
	timeToLiveSeconds:
	Sets the time to live for an element before it expires.
	i.e. The maximum time between creation time and when an element expires.
	Is only used if the element is not eternal.
	Optional attribute. A value of 0 means that and Element can live for infinity.
	The default value is 0.
	diskPersistent:
	Whether the disk store persists between restarts of the Virtual Machine.
	The default value is false.
	diskExpiryThreadIntervalSeconds:
	The number of seconds between runs of the disk expiry thread. The default value
	is 120 seconds.
	diskSpoolBufferSizeMB:
	This is the size to allocate the DiskStore for a spool buffer. Writes are made
	to this area and then asynchronously written to disk. The default size is 30MB.
	Each spool buffer is used only by its cache. If you get OutOfMemory errors consider
	lowering this value. To improve DiskStore performance consider increasing it. Trace level
	logging in the DiskStore will show if put back ups are occurring.
	clearOnFlush:
	whether the MemoryStore should be cleared when flush() is called on the cache.
	By default, this is true i.e. the MemoryStore is cleared.
	memoryStoreEvictionPolicy:
	Policy would be enforced upon reaching the maxElementsInMemory limit. Default
	policy is Least Recently Used (specified as LRU). Other policies available -
	First In First Out (specified as FIFO) and Less Frequently Used
	(specified as LFU)
	Cache elements can also contain sub elements which take the same format of a factory class
	and properties. Defined sub-elements are:
	* cacheEventListenerFactory - Enables registration of listeners for cache events, such as
	put, remove, update, and expire.
	* bootstrapCacheLoaderFactory - Specifies a BootstrapCacheLoader, which is called by a
	cache on initialisation to prepopulate itself.
	* cacheExtensionFactory - Specifies a CacheExtension, a generic mechansim to tie a class
	which holds a reference to a cache to the cache lifecycle.
	* cacheExceptionHandlerFactory - Specifies a CacheExceptionHandler, which is called when
	cache exceptions occur.
	* cacheLoaderFactory - Specifies a CacheLoader, which can be used both asynchronously and
	synchronously to load objects into a cache. More than one cacheLoaderFactory element
	can be added, in which case the loaders form a chain which are executed in order. If a
	loader returns null, the next in chain is called.
	RMI Cache Replication
	+++++++++++++++++++++
	Each cache that will be distributed needs to set a cache event listener which replicates
	messages to the other CacheManager peers. For the built-in RMI implementation this is done
	by adding a cacheEventListenerFactory element of type RMICacheReplicatorFactory to each
	distributed cache's configuration as per the following example:
	<cacheEventListenerFactory class="net.sf.ehcache.distribution.RMICacheReplicatorFactory"
	properties="replicateAsynchronously=true,
	replicatePuts=true,
	replicatePutsViaCopy=false,
	replicateUpdates=true,
	replicateUpdatesViaCopy=true,
	replicateRemovals=true
	asynchronousReplicationIntervalMillis=<number of milliseconds"
	propertySeparator="," />
	The RMICacheReplicatorFactory recognises the following properties:
	* replicatePuts=true|false - whether new elements placed in a cache are
	replicated to others. Defaults to true.
	* replicatePutsViaCopy=true|false - whether the new elements are
	copied to other caches (true), or whether a remove message is sent. Defaults to true.
	* replicateUpdates=true|false - whether new elements which override an
	element already existing with the same key are replicated. Defaults to true.
	* replicateRemovals=true - whether element removals are replicated. Defaults to true.
	* replicateAsynchronously=true | false - whether replications are
	asynchronous (true) or synchronous (false). Defaults to true.
	* replicateUpdatesViaCopy=true | false - whether the new elements are
	copied to other caches (true), or whether a remove message is sent. Defaults to true.
	* asynchronousReplicationIntervalMillis=<number of milliseconds> - The asynchronous
	replicator runs at a set interval of milliseconds. The default is 1000. The minimum
	is 10. This property is only applicable if replicateAsynchronously=true
	-->
	<!--
	Mandatory Default Cache configuration. These settings will be applied to caches
	created programmtically using CacheManager.add(String cacheName).
	The defaultCache has an implicit name "default" which is a reserved cache name.
	-->
	<!--
	<defaultCache
	maxElementsInMemory="10000"
	eternal="false"
	timeToIdleSeconds="120"
	timeToLiveSeconds="120"
	overflowToDisk="true"
	diskSpoolBufferSizeMB="30"
	maxElementsOnDisk="10000000"
	diskPersistent="false"
	diskExpiryThreadIntervalSeconds="120"
	memoryStoreEvictionPolicy="LRU"
	/>
	//statistics="true"
	-->
	<defaultCache
	maxElementsInMemory="10000"
	eternal="false"
	timeToIdleSeconds="120"
	timeToLiveSeconds="120"
	overflowToDisk="true"
	diskPersistent="false"
	memoryStoreEvictionPolicy="LFU"
	/>
	<cache name="org.hibernate.cache.StandardQueryCache"
	maxElementsInMemory="10000"
	timeToIdleSeconds="600"
	timeToLiveSeconds="600"
	overflowToDisk="false"
	/>
	<cache name="org.hibernate.cache.UpdateTimestampsCache"
	maxElementsInMemory="10000"
	eternal="true"
	overflowToDisk="false"
	/>
</ehcache>
